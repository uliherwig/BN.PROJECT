// <auto-generated />
using System;
using BN.PROJECT.DataService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BN.PROJECT.DataService.Migrations
{
    [DbContext(typeof(BNProjectDbContext))]
    [Migration("20240916122730_IdentityTables")]
    partial class IdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BN.PROJECT.DataService.AlpacaAsset", b =>
                {
                    b.Property<Guid>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AssetId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.AlpacaBar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("C")
                        .HasColumnType("numeric");

                    b.Property<decimal>("H")
                        .HasColumnType("numeric");

                    b.Property<decimal>("L")
                        .HasColumnType("numeric");

                    b.Property<decimal>("N")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("O")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("T")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("V")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Vw")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Bars");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.AlpacaOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AverageFillPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CancelledAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClientOrderId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiredAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FailedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FilledAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FilledQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HighWaterMark")
                        .HasColumnType("numeric");

                    b.Property<long>("IntegerFilledQuantity")
                        .HasColumnType("bigint");

                    b.Property<long>("IntegerQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("LimitPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Notional")
                        .HasColumnType("numeric");

                    b.Property<int>("OrderClass")
                        .HasColumnType("integer");

                    b.Property<int>("OrderSide")
                        .HasColumnType("integer");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ReplacedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReplacedByOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplacesOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("StopPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("SubmittedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TimeInForce")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TrailOffsetInDollars")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TrailOffsetInPercent")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.AlpacaPosition", b =>
                {
                    b.Property<Guid>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AssetChangePercent")
                        .HasColumnType("numeric");

                    b.Property<int>("AssetClass")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AssetCurrentPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AssetLastPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AvailableQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AverageEntryPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostBasis")
                        .HasColumnType("numeric");

                    b.Property<int>("Exchange")
                        .HasColumnType("integer");

                    b.Property<long>("IntegerAvailableQuantity")
                        .HasColumnType("bigint");

                    b.Property<long>("IntegerQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("IntradayUnrealizedProfitLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("IntradayUnrealizedProfitLossPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MarketValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("UnrealizedProfitLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("UnrealizedProfitLossPercent")
                        .HasColumnType("numeric");

                    b.HasKey("AssetId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.Session", b =>
                {
                    b.HasOne("BN.PROJECT.DataService.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BN.PROJECT.DataService.UserRole", b =>
                {
                    b.HasOne("BN.PROJECT.DataService.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BN.PROJECT.DataService.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
